# As config example taken this file: https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\tests\\scripts\\appveyor\\run_with_env.cmd"

  matrix:

    # TODO Fix bootloader compilation of 64bit bootloader - either fix for msvc or install mingw-w64
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
      PYWIN_ARCH: "win-amd64"
      # This forces to build bootloader with MSVC.
      # Appveyor does not have 64-bit mingw.
      WAF_ARGS: ""

    #- PYTHON: "C:\\Python33-x64"
      #PYTHON_VERSION: "3.3"
      #PYTHON_ARCH: "64"
      #PYWIN_ARCH: "win-amd64"
      #WAF_ARGS: ""
#
#    - PYTHON: "C:\\Python34"
#      PYTHON_VERSION: "3.4"
#      PYTHON_ARCH: "32"
#      PYWIN_ARCH: "win32"
#      WAF_ARGS: ""

#    - PYTHON: "C:\\Python33"
#      PYTHON_VERSION: "3.3"
#      PYTHON_ARCH: "32"
#      PYWIN_ARCH: "win32"
#      WAF_ARGS: "--gcc"
#
#    - PYTHON: "C:\\Python27"
#      PYTHON_VERSION: "2.7"
#      PYTHON_ARCH: "32"
#      PYWIN_ARCH: "win32"
#      WAF_ARGS: "--gcc"

cache:
  # Cache created Python .whl packages to avoid compiling them again.
  # .whl packages will be recreated only if ./tests/requirements.txt has changed.
  - C:\wheels -> tests\requirements.txt
  # Cache downloaded pip packages
  #- "%LOCALAPPDATA%\\pip" -> tests\requirements.txt
  # Cache pywin32 packages - downloading again and again is unreliable and
  # causes some failures
  - C:\downloads

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"

install:
  - "SET PYWIN_FILENAME=pywin32-219.%PYWIN_ARCH%-py%PYTHON_VERSION%.exe"
  - ECHO %PYWIN_FILENAME%
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Compile bootloader, use mingw.
  - "SET PATH=C:\\MinGW\\bin;%PATH%"
  - cd bootloader
  - "python waf distclean all %WAF_ARGS%"
  - cd ..

  ### Install the PyInsaller dependencies.

  # Create directory for downloads if it does not exist already.
  - ps: If ( -not (Test-Path C:/downloads) )  { mkdir C:/downloads }

  # PyInstaller depends on pywin32 package.
  # This package is not available for 'pip install'.
  # Download pywin32 only if it is not cached.
  - ps: If ( -not (Test-Path "C:/downloads/$env:PYWIN_FILENAME") )  {(new-object net.webclient).DownloadFile('https://downloads.sourceforge.net/project/pywin32/pywin32/Build%20219/'+$env:PYWIN_FILENAME, 'C:\downloads\'+$env:PYWIN_FILENAME)}
  - "%CMD_IN_ENV% easy_install C:\\downloads\\%PYWIN_FILENAME%"

  # Create .whl packages from dependencies for possible caching.
  # First install 'wheel' package to be able create .whl files.
  - "%CMD_IN_ENV% pip install wheel"

  # Create .whl packages from dependencies for possible caching.
  # If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  # TODO check if Appveyour deletes 'wheel' directory when cache is invalidated.
  - "IF NOT EXIST C:/wheels %CMD_IN_ENV% pip wheel --wheel-dir C:/wheels -r tests/requirements.txt"

  # Install the PyInstaller test dependencies.
  # Use cached .whl packages.
  - "%CMD_IN_ENV% pip install --no-index --find-links C:\\wheels -r tests/requirements.txt"

  # Install PyInstaller into virtualenv.
  - "%CMD_IN_ENV% pip install -e ."

build: none

test_script:
  # Split tests into several subprocesses.

  # Trying to discover why pytest fails with EBADF when calling dup2 to resume FD capture
  # Run a bunch of tests, hopefully enough to expose the error
  - "%CMD_IN_ENV% py.test -k "module or python or encoding or path" -n 3"
